diff --git a/app/Http/Controllers/CategoryController.php b/app/Http/Controllers/CategoryController.php
index 5c5ac88..81c4114 100644
--- a/app/Http/Controllers/CategoryController.php
+++ b/app/Http/Controllers/CategoryController.php
@@ -15,22 +15,6 @@ public function index()
         return Category::with('products')->get();
     }
 
-    /**
-     * Show the form for creating a new resource.
-     */
-    public function create()
-    {
-        //
-    }
-
-    /**
-     * Store a newly created resource in storage.
-     */
-    public function store(Request $request)
-    {
-        //
-    }
-
     /**
      * Display the specified resource.
      */
@@ -38,28 +22,4 @@ public function show(Category $category)
     {
         return $category->load('products');
     }
-
-    /**
-     * Show the form for editing the specified resource.
-     */
-    public function edit(Category $category)
-    {
-        //
-    }
-
-    /**
-     * Update the specified resource in storage.
-     */
-    public function update(Request $request, Category $category)
-    {
-        //
-    }
-
-    /**
-     * Remove the specified resource from storage.
-     */
-    public function destroy(Category $category)
-    {
-        //
-    }
 }
diff --git a/app/Http/Controllers/OrderController.php b/app/Http/Controllers/OrderController.php
index b255658..7744a5b 100644
--- a/app/Http/Controllers/OrderController.php
+++ b/app/Http/Controllers/OrderController.php
@@ -9,51 +9,34 @@
 class OrderController extends Controller
 {
     /**
-     * Display a listing of the resource.
-     */
-    public function index()
-    {
-        //
-    }
-
-    /**
-     * Show the form for creating a new resource.
-     */
-    public function create()
-    {
-        //
-    }
-
-    /**
-     * Store a newly created resource in storage.
-     */
-    public function store(StoreOrderRequest $request)
-    {
-        //
-    }
-
-    /**
-     * Display the specified resource.
+     * Display the specified order.
      */
     public function show(Order $order)
     {
-        //
+        return $order;
     }
 
     /**
-     * Show the form for editing the specified resource.
-     */
-    public function edit(Order $order)
-    {
-        //
-    }
-
-    /**
-     * Update the specified resource in storage.
+     * Update the specified order in storage.
      */
     public function update(UpdateOrderRequest $request, Order $order)
     {
-        //
+        $newStatus = $request->get('status');
+
+        // Do not allow an order to go back in status
+        if ($newStatus === Order::ORDER_STATUS_INITIAL && in_array($order->status, [Order::ORDER_STATUS_CANCELED, Order::ORDER_STATUS_FINISHED]) || $newStatus === Order::ORDER_STATUS_CANCELED && $order->status === Order::ORDER_STATUS_FINISHED) {
+            return response()->json([
+                'success' => false,
+                'error' => 'Invalid status change.'
+            ], 400);
+        }
+
+        $order->status = $newStatus;
+        $order->save();
+
+        return [
+            'success' => true
+        ];
     }
 
     /**
diff --git a/app/Http/Requests/UpdateOrderRequest.php b/app/Http/Requests/UpdateOrderRequest.php
index 2f86b44..af924d2 100644
--- a/app/Http/Requests/UpdateOrderRequest.php
+++ b/app/Http/Requests/UpdateOrderRequest.php
@@ -2,7 +2,9 @@
 
 namespace App\Http\Requests;
 
+use App\Models\Order;
 use Illuminate\Foundation\Http\FormRequest;
+use Illuminate\Validation\Rule;
 
 class UpdateOrderRequest extends FormRequest
 {
@@ -11,7 +13,8 @@ class UpdateOrderRequest extends FormRequest
      */
     public function authorize(): bool
     {
-        return false;
+        // Authorize all requests
+        return true;
     }
 
     /**
@@ -22,7 +25,7 @@ public function authorize(): bool
     public function rules(): array
     {
         return [
-            //
+            'status' => ['required', Rule::in(Order::ORDER_STATUS)],
         ];
     }
 }
diff --git a/routes/api.php b/routes/api.php
index 61079b9..04e1c53 100644
--- a/routes/api.php
+++ b/routes/api.php
@@ -4,8 +4,6 @@
 use App\Http\Controllers\OrderController;
 use App\Http\Controllers\ProductController;
 use App\Http\Controllers\UserController;
-use App\Models\Category;
-use Illuminate\Http\Request;
 use Illuminate\Support\Facades\Route;
 
 // Homepage
@@ -29,4 +27,10 @@
     ->group(function () {
         Route::put('/', 'store')
             ->name('store');
+
+        Route::get('{order}', 'show')
+            ->name('show');
+
+        Route::patch('{order}', 'update')
+            ->name('update');
     });
diff --git a/tests/Feature/CategoryTest.php b/tests/Feature/CategoryTest.php
index 7bb79bf..c0ce0f2 100644
--- a/tests/Feature/CategoryTest.php
+++ b/tests/Feature/CategoryTest.php
@@ -27,7 +27,7 @@ public function test_categories_exist(): void
      */
     public function test_get_categories_list(): void
     {
-        $response = $this->get('api/');
+        $response = $this->get(route('category.list'));
 
         $response->assertStatus(200);
         $response->assertJsonStructure([
diff --git a/tests/Feature/OrderTest.php b/tests/Feature/OrderTest.php
index cfa6dab..6e47b94 100644
--- a/tests/Feature/OrderTest.php
+++ b/tests/Feature/OrderTest.php
@@ -11,6 +11,8 @@
 use App\Order\OrderItem;
 use Illuminate\Foundation\Testing\RefreshDatabase;
 use Illuminate\Support\Collection;
+use Illuminate\Testing\Fluent\AssertableJson;
+use Illuminate\Validation\ValidationException;
 use Tests\TestCase;
 
 class OrderTest extends TestCase
@@ -56,7 +58,7 @@ public function test_order_store(): void
         $order = $creator->create(
             $user->id,
             $products
-                ->map(function(Product $product) {
+                ->map(function (Product $product) {
                     $quantity = fake()->numberBetween(1, $product->stock);
                     return new OrderItem($product->id, $quantity);
                 })
@@ -104,11 +106,87 @@ public function test_order_store_invalid_quantity(): void
         $creator->create(
             $user->id,
             $products
-                ->map(function(Product $product) {
+                ->map(function (Product $product) {
                     $quantity = fake()->numberBetween($product->stock + 1, PHP_INT_MAX);
                     return new OrderItem($product->id, $quantity);
                 })
                 ->all()
         );
     }
+
+    public function test_get_order(): void
+    {
+        $order = Order::inRandomOrder()->first();
+
+        $response = $this->get(route('order.show', ['order' => $order->id]));
+
+        $response
+            ->assertStatus(200)
+            ->assertJson(
+                fn (AssertableJson $json) =>
+                $json->where('user_id', $order->user_id)
+                    ->where('id', $order->id)
+                    ->where('status', $order->status)
+                    ->etc()
+            );
+    }
+
+    public function test_update_order(): void
+    {
+        $order = Order::inRandomOrder()->first();
+
+        $data = [
+            'status' => Order::ORDER_STATUS_FINISHED
+        ];
+
+        $response = $this->patch(route('order.update', ['order' => $order->id]), $data);
+
+        $response
+            ->assertStatus(200)
+            ->assertJson(
+                fn (AssertableJson $json) => $json->where('success', true)->etc()
+            );
+    }
+
+    public function test_update_order_error_no_data(): void
+    {
+        $this->expectException(ValidationException::class);
+
+        $order = Order::inRandomOrder()->first();
+
+        $response = $this->patch(route('order.update', ['order' => $order->id]), []);
+
+        // Because user is not authenticated
+        $response->assertStatus(302)
+            ->assertJsonValidationErrorFor('status');
+    }
+
+    public function test_update_order_error_finished_new_status_canceled(): void
+    {
+        $order = Order::inRandomOrder()->where('status', Order::ORDER_STATUS_FINISHED)->first();
+        $data = [
+            'status' => Order::ORDER_STATUS_CANCELED,
+        ];
+
+        $response = $this->patch(route('order.update', ['order' => $order->id]), $data);
+
+        $response->assertStatus(400)
+            ->assertJson(
+                fn (AssertableJson $json) => $json->where('success', false)->where('error', 'Invalid status change.')->etc()
+            );
+    }
+
+    public function test_update_order_error_finished_new_status_initial(): void
+    {
+        $order = Order::inRandomOrder()->where('status', Order::ORDER_STATUS_FINISHED)->first();
+        $data = [
+            'status' => Order::ORDER_STATUS_INITIAL,
+        ];
+
+        $response = $this->patch(route('order.update', ['order' => $order->id]), $data);
+
+        $response->assertStatus(400)->assertJson(
+            fn (AssertableJson $json) => $json->where('success', false)->where('error', 'Invalid status change.')->etc()
+        );;
+    }
 }
diff --git a/tests/Feature/UserTest.php b/tests/Feature/UserTest.php
index 82f8a4d..bcbd855 100644
--- a/tests/Feature/UserTest.php
+++ b/tests/Feature/UserTest.php
@@ -12,14 +12,17 @@ class UserTest extends TestCase
 {
     use RefreshDatabase;
 
-    public function test_orders(): void {
+    public function test_orders(): void
+    {
         $user = User::inRandomOrder()->first();
 
-        $response = $this->get("api/user/{$user->id}/orders");
+        $response = $this->get(route('user.orders', ['user' => $user->id]));
         $response
             ->assertStatus(200)
-            ->assertJson(fn (AssertableJson $json) =>
-                $json->each(fn (AssertableJson $json) =>
+            ->assertJson(
+                fn (AssertableJson $json) =>
+                $json->each(
+                    fn (AssertableJson $json) =>
                     $json->where('user_id', $user->id)->etc()
                 )
             )
